version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: saas_erp_postgres
    environment:
      POSTGRES_DB: saas_erp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - saas_erp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: saas_erp_redis
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - saas_erp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery_worker:
    build: .
    container_name: saas_erp_celery_worker
    command: celery -A celery_app.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/saas_erp
      - REDIS_URL=redis://:redis123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis123@redis:6379/0
    volumes:
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas_erp_network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build: .
    container_name: saas_erp_celery_beat
    command: celery -A celery_app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/saas_erp
      - REDIS_URL=redis://:redis123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis123@redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - saas_erp_network
    restart: unless-stopped

  # Flask Web Application
  web:
    build: .
    container_name: saas_erp_web
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/saas_erp
      - REDIS_URL=redis://:redis123@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis123@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis123@redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - MAIL_SERVER=smtp.gmail.com
      - MAIL_PORT=587
      - MAIL_USE_TLS=true
      - MAIL_USERNAME=your-email@gmail.com
      - MAIL_PASSWORD=your-app-password
      - MAIL_DEFAULT_SENDER=your-email@gmail.com
      - STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key
      - STRIPE_SECRET_KEY=your-stripe-secret-key
      - RAZORPAY_KEY_ID=your-razorpay-key-id
      - RAZORPAY_KEY_SECRET=your-razorpay-key-secret
      - TWILIO_ACCOUNT_SID=your-twilio-account-sid
      - TWILIO_AUTH_TOKEN=your-twilio-auth-token
      - TWILIO_PHONE_NUMBER=your-twilio-phone-number
      - UPLOAD_FOLDER=/app/uploads
      - DOMAIN=example.com
    volumes:
      - ./uploads:/app/uploads
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
      celery_beat:
        condition: service_started
    networks:
      - saas_erp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: saas_erp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - saas_erp_network
    restart: unless-stopped

  # Database Backup Service
  backup:
    build: .
    container_name: saas_erp_backup
    command: celery -A celery_app.celery call celery_app.backup_database
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/saas_erp
      - REDIS_URL=redis://:redis123@redis:6379/0
    volumes:
      - ./backups:/app/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - saas_erp_network
    restart: "no"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  saas_erp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
